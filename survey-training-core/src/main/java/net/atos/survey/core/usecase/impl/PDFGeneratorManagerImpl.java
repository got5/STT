package net.atos.survey.core.usecase.impl;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

import javax.ejb.Stateless;
import javax.inject.Inject;

import net.atos.survey.core.entity.ResponseSurvey;
import net.atos.survey.core.entity.TrainingSession;
import net.atos.survey.core.entity.User;
import net.atos.survey.core.exception.NoTrainingSessionFoundException;
import net.atos.survey.core.exception.UserNotAnsweredToSurveyException;
import net.atos.survey.core.exception.UserNotExistException;
import net.atos.survey.core.exception.UserNotInTrainingSessionException;
import net.atos.survey.core.usecase.PDFGeneratorManager;
import net.atos.survey.core.usecase.TrainingSessionManager;
import net.atos.survey.core.usecase.UserManager;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

@Stateless(name = "net.atos.survey.core.usecase.PDFGeneratorManager")
public class PDFGeneratorManagerImpl implements PDFGeneratorManager {

	@Inject
	TrainingSessionManager trainingSessionManager;
	@Inject
	UserManager userManager;

	private static Font titleFont = new Font(Font.FontFamily.HELVETICA, 14,Font.BOLD|Font.UNDERLINE,BaseColor.GRAY);		
	private static Font headerFont = new Font(Font.FontFamily.HELVETICA,6,Font.BOLD,BaseColor.GRAY);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,Font.BOLD);

	@Override
	public InputStream buildPDF(Long trainingSessionId, Long traineeId)
			throws Exception {

		if (trainingSessionId == null || traineeId == null) {
			throw new NullPointerException("Page PDFGenerator non initialisé");
		}

		TrainingSession ts = trainingSessionManager.findById(trainingSessionId);
		User trainee = userManager.findById(traineeId);
		ResponseSurvey responseSurvey;

		if (ts == null)
			throw new NoTrainingSessionFoundException();
		if (trainee == null)
			throw new UserNotExistException();

		ts = trainingSessionManager.loadAll(trainingSessionId);
		if (!ts.getTrainees().contains(trainee))
			throw new UserNotInTrainingSessionException();

		responseSurvey = ts.getResponseSurvey(trainee);

		if (responseSurvey == null)
			throw new UserNotAnsweredToSurveyException();

		// step 1: creation of a document-object
		Document document = new Document(PageSize.A4,10,10,10,20);

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		try {
			// step 2:
			// we create a writer that listens to the document
			// and directs a PDF-stream to a file
			PdfWriter writer = PdfWriter.getInstance(document, baos);
			// step 3: we open the document
			document.open();
		
			// step 4: we add a paragraph to the document
			addMetaData(document,trainingSessionId,traineeId);
			addTitlePage(document);
			addContent(document);

		} catch (DocumentException de) {
			System.err.println(de.getMessage());
		}
		// step 5: we close the document
		document.close();
		ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
		return bais;

	}

	private void addContent(Document document) {
		// TODO Auto-generated method stub

	}

	private void addTitlePage(Document document)    throws Exception {
	    Paragraph preface = new Paragraph();
	    // We add one empty line
	    //addEmptyLine(preface, 1);
	    
	 // Lets set the image 
	    Image image = Image.getInstance("src/main/webapp/static/img/atos-logo.jpg");
	    image.setAlignment(Image.RIGHT|Image.TEXTWRAP);
	    image.scalePercent(10);
	    document.add(image);
	    
	    preface.add(new Paragraph("EVALUATION DE STAGE", titleFont));

	    addEmptyLine(preface, 1);
	    // Will create: Report generated by: _name, _date
	    Paragraph p1 = new Paragraph("Vos remarques nous sont utiles pour adapter les formations à vos besoins. ",headerFont);
	    Paragraph p2 = new Paragraph("Merci de remplir ce questionnaire le plus précisément possible et de le retourner au service Formation.",headerFont);
	    p1.setAlignment(Paragraph.ALIGN_CENTER);
	    p2.setAlignment(Paragraph.ALIGN_CENTER);
	   
	    preface.add(p1);
	    preface.add(p2);
	   
	    
	    
	    addEmptyLine(preface, 8);

	    preface.add(new Paragraph("This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
	        redFont));

	    document.add(preface);
	  
	}

	private void addMetaData(Document document, Long trainingSessionId,
			Long traineeId) {
		document.addTitle(createTitle(trainingSessionId, traineeId));
		document.addSubject("Survey");
		document.addKeywords("Survey,Atos");
		document.addAuthor("GPS");
		document.addCreator("GPS Web Team");

	}

	@Override
	public String createTitle(Long trainingSessionId, Long traineeId) {
		String title = "";
		TrainingSession ts = trainingSessionManager.findById(trainingSessionId);
		User trainee = userManager.findById(traineeId);

		title += trainee.getName() + "-" + trainee.getFirstName() + "-"
				+ ts.getTraining().getName();
		return title;

	}
	
	 private static void addEmptyLine(Paragraph paragraph, int number) {
		    for (int i = 0; i < number; i++) {
		      paragraph.add(new Paragraph(" "));
		    }
		  }

	 
}
